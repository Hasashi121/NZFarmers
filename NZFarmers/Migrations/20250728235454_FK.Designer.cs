// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NZFarmers.Data;

#nullable disable

namespace NZFarmers.Migrations
{
    [DbContext(typeof(NZFarmersContext))]
    [Migration("20250728235454_FK")]
    partial class FK
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("NZFarmers.Areas.Identity.Data.NZFarmersUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "seed-user-1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "048dc205-5af3-46ac-ad5e-d0e75d91d06b",
                            ContactNumber = "",
                            CreatedAt = new DateTime(2025, 7, 28, 23, 54, 52, 248, DateTimeKind.Utc).AddTicks(5832),
                            Email = "sarah@example.com",
                            EmailConfirmed = true,
                            FirstName = "",
                            LastName = "",
                            LockoutEnabled = false,
                            NormalizedEmail = "SARAH@EXAMPLE.COM",
                            NormalizedUserName = "SARAH@EXAMPLE.COM",
                            PasswordHash = "PLACEHOLDER_HASH",
                            PhoneNumberConfirmed = false,
                            Role = 2,
                            SecurityStamp = "7126e95c-a481-45b5-9eef-a0df012c0b2c",
                            TwoFactorEnabled = false,
                            UserName = "sarah@example.com"
                        },
                        new
                        {
                            Id = "seed-user-2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "bffd0a89-f7d2-433a-81c5-1e4c81afd7c6",
                            ContactNumber = "",
                            CreatedAt = new DateTime(2025, 7, 28, 23, 54, 52, 248, DateTimeKind.Utc).AddTicks(6069),
                            Email = "tom@example.com",
                            EmailConfirmed = true,
                            FirstName = "",
                            LastName = "",
                            LockoutEnabled = false,
                            NormalizedEmail = "TOM@EXAMPLE.COM",
                            NormalizedUserName = "TOM@EXAMPLE.COM",
                            PasswordHash = "PLACEHOLDER_HASH",
                            PhoneNumberConfirmed = false,
                            Role = 2,
                            SecurityStamp = "1e82d0dc-fb20-457a-b828-6213bec6bf25",
                            TwoFactorEnabled = false,
                            UserName = "tom@example.com"
                        });
                });

            modelBuilder.Entity("NZFarmers.Models.DeliveryTracking", b =>
                {
                    b.Property<int>("TrackingID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TrackingID"));

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<int>("OrderID")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("TrackingID");

                    b.HasIndex("OrderID")
                        .IsUnique();

                    b.ToTable("DeliveryTrackings");
                });

            modelBuilder.Entity("NZFarmers.Models.EducationalContent", b =>
                {
                    b.Property<int>("ContentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ContentID"));

                    b.Property<string>("ContentURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("ContentID");

                    b.ToTable("EducationalContents");

                    b.HasData(
                        new
                        {
                            ContentID = 10,
                            ContentURL = "https://www.mpi.govt.nz/agriculture/sustainable-farming/",
                            CreatedAt = new DateTime(2025, 6, 28, 23, 54, 52, 248, DateTimeKind.Utc).AddTicks(6549),
                            Description = "Learn about eco-friendly farming methods that work best in New Zealand's unique climate and soil conditions. Discover how to reduce environmental impact while maintaining productivity.",
                            Title = "Sustainable Farming Practices for New Zealand"
                        },
                        new
                        {
                            ContentID = 20,
                            ContentURL = "https://www.asurequality.com/our-services/organic-certification/",
                            CreatedAt = new DateTime(2025, 7, 3, 23, 54, 52, 248, DateTimeKind.Utc).AddTicks(6560),
                            Description = "Step-by-step guide to obtaining organic certification for your farm products. Understand the requirements, documentation needed, and benefits of organic farming.",
                            Title = "Organic Certification Guide"
                        },
                        new
                        {
                            ContentID = 30,
                            ContentURL = "https://www.landcareresearch.co.nz/discover-our-research/environment/soils/",
                            CreatedAt = new DateTime(2025, 7, 8, 23, 54, 52, 248, DateTimeKind.Utc).AddTicks(6565),
                            Description = "Essential tips for maintaining healthy soil and optimizing nutrient levels. Learn about composting, crop rotation, and natural fertilizers.",
                            Title = "Soil Health and Nutrition Management"
                        },
                        new
                        {
                            ContentID = 40,
                            ContentURL = "https://www.niwa.co.nz/agriculture/irrigation",
                            CreatedAt = new DateTime(2025, 7, 10, 23, 54, 52, 248, DateTimeKind.Utc).AddTicks(6570),
                            Description = "Effective strategies for water management and conservation on your farm. Discover irrigation techniques that save water while maximizing crop yield.",
                            Title = "Water Conservation in Agriculture"
                        },
                        new
                        {
                            ContentID = 50,
                            ContentURL = "https://www.plantandfood.co.nz/page/agriculture/pest-management/",
                            CreatedAt = new DateTime(2025, 7, 13, 23, 54, 52, 248, DateTimeKind.Utc).AddTicks(6574),
                            Description = "Integrated pest management strategies that protect your crops naturally. Learn to identify common pests and diseases affecting New Zealand farms.",
                            Title = "Pest and Disease Management"
                        },
                        new
                        {
                            ContentID = 60,
                            ContentURL = "https://www.mpi.govt.nz/agriculture/climate-change/",
                            CreatedAt = new DateTime(2025, 7, 16, 23, 54, 52, 248, DateTimeKind.Utc).AddTicks(6578),
                            Description = "Prepare your farm for changing weather patterns and extreme events. Strategies for building resilience and adapting to climate variability.",
                            Title = "Climate Change Adaptation for Farmers"
                        },
                        new
                        {
                            ContentID = 70,
                            ContentURL = "https://www.marketgardening.co.nz/direct-marketing/",
                            CreatedAt = new DateTime(2025, 7, 18, 23, 54, 52, 248, DateTimeKind.Utc).AddTicks(6583),
                            Description = "Learn how to sell directly to consumers and restaurants. Build relationships with local buyers and maximize your profit margins through direct sales.",
                            Title = "Direct Marketing and Farm-to-Table Sales"
                        },
                        new
                        {
                            ContentID = 80,
                            ContentURL = "https://www.gardening.co.nz/vegetables/planting-calendar/",
                            CreatedAt = new DateTime(2025, 7, 20, 23, 54, 52, 248, DateTimeKind.Utc).AddTicks(6587),
                            Description = "Month-by-month guide to planting vegetables and fruits in New Zealand. Optimize your growing seasons and plan for year-round production.",
                            Title = "Seasonal Planting Calendar for NZ"
                        },
                        new
                        {
                            ContentID = 90,
                            ContentURL = "https://www.worksafe.govt.nz/topic-and-industry/agriculture/",
                            CreatedAt = new DateTime(2025, 7, 23, 23, 54, 52, 248, DateTimeKind.Utc).AddTicks(6591),
                            Description = "Essential safety practices and risk management strategies for farm operations. Protect yourself, your workers, and your property.",
                            Title = "Farm Safety and Risk Management"
                        },
                        new
                        {
                            ContentID = 100,
                            ContentURL = "https://www.agritech.org.nz/resources/",
                            CreatedAt = new DateTime(2025, 7, 25, 23, 54, 52, 248, DateTimeKind.Utc).AddTicks(6595),
                            Description = "Explore how technology can improve farm efficiency and productivity. From GPS tractors to soil sensors, discover the latest agricultural innovations.",
                            Title = "Technology in Modern Farming"
                        });
                });

            modelBuilder.Entity("NZFarmers.Models.FarmerMarketEvent", b =>
                {
                    b.Property<int>("EventID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EventID"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("EventID");

                    b.ToTable("FarmerMarketEvents");
                });

            modelBuilder.Entity("NZFarmers.Models.FarmerMarketParticipation", b =>
                {
                    b.Property<int>("FarmerID")
                        .HasColumnType("int");

                    b.Property<int>("EventID")
                        .HasColumnType("int");

                    b.Property<int?>("FarmerMarketsEventID")
                        .HasColumnType("int");

                    b.Property<int>("ParticipationID")
                        .HasColumnType("int");

                    b.HasKey("FarmerID", "EventID");

                    b.HasIndex("EventID");

                    b.HasIndex("FarmerMarketsEventID");

                    b.ToTable("FarmerMarketParticipations");
                });

            modelBuilder.Entity("NZFarmers.Models.FarmerMarkets", b =>
                {
                    b.Property<int>("EventID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EventID"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("EventID");

                    b.ToTable("FarmerMarkets");
                });

            modelBuilder.Entity("NZFarmers.Models.FarmerProduct", b =>
                {
                    b.Property<int>("FarmerProductID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FarmerProductID"));

                    b.Property<int>("Category")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("FarmerID")
                        .HasColumnType("int");

                    b.Property<int?>("FarmerProductID1")
                        .HasColumnType("int");

                    b.Property<string>("ImageURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.HasKey("FarmerProductID");

                    b.HasIndex("FarmerID");

                    b.HasIndex("FarmerProductID1");

                    b.ToTable("FarmerProducts");

                    b.HasData(
                        new
                        {
                            FarmerProductID = 1,
                            Category = 0,
                            Description = "Juicy and pesticide-free tomatoes.",
                            FarmerID = 2,
                            ImageURL = "https://example.com/images/tomatoes.jpg",
                            Price = 3.50m,
                            ProductName = "Organic Tomatoes",
                            Stock = 120
                        },
                        new
                        {
                            FarmerProductID = 2,
                            Category = 0,
                            Description = "Golden corn, perfect for BBQs.",
                            FarmerID = 2,
                            ImageURL = "https://example.com/images/corn.jpg",
                            Price = 2.20m,
                            ProductName = "Sweet Corn",
                            Stock = 200
                        },
                        new
                        {
                            FarmerProductID = 3,
                            Category = 6,
                            Description = "Locally harvested honey from native bush.",
                            FarmerID = 3,
                            ImageURL = "https://example.com/images/honey.jpg",
                            Price = 8.99m,
                            ProductName = "Raw Clover Honey",
                            Stock = 60
                        },
                        new
                        {
                            FarmerProductID = 4,
                            Category = 3,
                            Description = "Dozen of fresh free-range eggs.",
                            FarmerID = 3,
                            ImageURL = "https://example.com/images/eggs.jpg",
                            Price = 5.00m,
                            ProductName = "Free Range Eggs",
                            Stock = 75
                        });
                });

            modelBuilder.Entity("NZFarmers.Models.Farmers", b =>
                {
                    b.Property<int>("FarmerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FarmerID"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("FarmName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfileImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Region")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ZipCode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("FarmerID");

                    b.HasIndex("UserID");

                    b.ToTable("Farmers");

                    b.HasData(
                        new
                        {
                            FarmerID = 3,
                            Address = "123 Orchard Lane",
                            City = "Hamilton",
                            Description = "Specializing in organic produce.",
                            FarmName = "Green Valley Farms",
                            PhoneNumber = "+64212345678",
                            ProfileImage = "https://example.com/images/farm1.jpg",
                            Region = "Waikato",
                            UserID = "seed-user-1",
                            ZipCode = "3204"
                        },
                        new
                        {
                            FarmerID = 2,
                            Address = "456 Harvest Rd",
                            City = "Christchurch",
                            Description = "Locally sourced vegetables and fruits.",
                            FarmName = "Sunny Fields",
                            PhoneNumber = "+64287654321",
                            ProfileImage = "https://example.com/images/farm2.jpg",
                            Region = "Canterbury",
                            UserID = "seed-user-2",
                            ZipCode = "8011"
                        });
                });

            modelBuilder.Entity("NZFarmers.Models.OrderDetail", b =>
                {
                    b.Property<int>("OrderDetailID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderDetailID"));

                    b.Property<int>("FarmerProductID")
                        .HasColumnType("int");

                    b.Property<int>("OrderID")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("Subtotal")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("OrderDetailID");

                    b.HasIndex("FarmerProductID");

                    b.HasIndex("OrderID");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("NZFarmers.Models.PaymentDetail", b =>
                {
                    b.Property<int>("PaymentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentID"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Method")
                        .HasColumnType("int");

                    b.Property<int>("OrderID")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("PaymentID");

                    b.HasIndex("OrderID");

                    b.HasIndex("UserID");

                    b.ToTable("PaymentDetails");
                });

            modelBuilder.Entity("NZFarmers.Models.Rating", b =>
                {
                    b.Property<int>("RatingID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RatingID"));

                    b.Property<string>("Comment")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("FarmerID")
                        .HasColumnType("int");

                    b.Property<int>("RatingValue")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("RatingID");

                    b.HasIndex("FarmerID");

                    b.HasIndex("UserId");

                    b.ToTable("Ratings");
                });

            modelBuilder.Entity("NZFarmers.Models.ShoppingCartItem", b =>
                {
                    b.Property<int>("ShoppingCartItemID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ShoppingCartItemID"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("FarmerProductID")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ShoppingCartItemID");

                    b.HasIndex("FarmerProductID");

                    b.HasIndex("UserID");

                    b.ToTable("ShoppingCartItems");
                });

            modelBuilder.Entity("Order", b =>
                {
                    b.Property<int>("OrderID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderID"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("OrderID");

                    b.HasIndex("UserID");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("NZFarmers.Areas.Identity.Data.NZFarmersUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("NZFarmers.Areas.Identity.Data.NZFarmersUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NZFarmers.Areas.Identity.Data.NZFarmersUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("NZFarmers.Areas.Identity.Data.NZFarmersUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NZFarmers.Models.DeliveryTracking", b =>
                {
                    b.HasOne("Order", "Order")
                        .WithOne("DeliveryTracking")
                        .HasForeignKey("NZFarmers.Models.DeliveryTracking", "OrderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("NZFarmers.Models.FarmerMarketParticipation", b =>
                {
                    b.HasOne("NZFarmers.Models.FarmerMarketEvent", "FarmerMarketEvent")
                        .WithMany("FarmerMarketParticipations")
                        .HasForeignKey("EventID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NZFarmers.Models.Farmers", "Farmer")
                        .WithMany("FarmerMarketParticipations")
                        .HasForeignKey("FarmerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NZFarmers.Models.FarmerMarkets", null)
                        .WithMany("FarmerMarketParticipations")
                        .HasForeignKey("FarmerMarketsEventID");

                    b.Navigation("Farmer");

                    b.Navigation("FarmerMarketEvent");
                });

            modelBuilder.Entity("NZFarmers.Models.FarmerProduct", b =>
                {
                    b.HasOne("NZFarmers.Models.Farmers", "Farmer")
                        .WithMany("FarmerProducts")
                        .HasForeignKey("FarmerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NZFarmers.Models.FarmerProduct", null)
                        .WithMany("FarmerProducts")
                        .HasForeignKey("FarmerProductID1");

                    b.Navigation("Farmer");
                });

            modelBuilder.Entity("NZFarmers.Models.Farmers", b =>
                {
                    b.HasOne("NZFarmers.Areas.Identity.Data.NZFarmersUser", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("NZFarmers.Models.OrderDetail", b =>
                {
                    b.HasOne("NZFarmers.Models.FarmerProduct", "FarmerProduct")
                        .WithMany("OrderDetails")
                        .HasForeignKey("FarmerProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("FarmerProduct");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("NZFarmers.Models.PaymentDetail", b =>
                {
                    b.HasOne("Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("NZFarmers.Areas.Identity.Data.NZFarmersUser", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("User");
                });

            modelBuilder.Entity("NZFarmers.Models.Rating", b =>
                {
                    b.HasOne("NZFarmers.Models.Farmers", "Farmer")
                        .WithMany("Ratings")
                        .HasForeignKey("FarmerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NZFarmers.Areas.Identity.Data.NZFarmersUser", "User")
                        .WithMany("Ratings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Farmer");

                    b.Navigation("User");
                });

            modelBuilder.Entity("NZFarmers.Models.ShoppingCartItem", b =>
                {
                    b.HasOne("NZFarmers.Models.FarmerProduct", "FarmerProduct")
                        .WithMany("ShoppingCartItems")
                        .HasForeignKey("FarmerProductID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("NZFarmers.Areas.Identity.Data.NZFarmersUser", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("FarmerProduct");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Order", b =>
                {
                    b.HasOne("NZFarmers.Areas.Identity.Data.NZFarmersUser", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("NZFarmers.Areas.Identity.Data.NZFarmersUser", b =>
                {
                    b.Navigation("Ratings");
                });

            modelBuilder.Entity("NZFarmers.Models.FarmerMarketEvent", b =>
                {
                    b.Navigation("FarmerMarketParticipations");
                });

            modelBuilder.Entity("NZFarmers.Models.FarmerMarkets", b =>
                {
                    b.Navigation("FarmerMarketParticipations");
                });

            modelBuilder.Entity("NZFarmers.Models.FarmerProduct", b =>
                {
                    b.Navigation("FarmerProducts");

                    b.Navigation("OrderDetails");

                    b.Navigation("ShoppingCartItems");
                });

            modelBuilder.Entity("NZFarmers.Models.Farmers", b =>
                {
                    b.Navigation("FarmerMarketParticipations");

                    b.Navigation("FarmerProducts");

                    b.Navigation("Ratings");
                });

            modelBuilder.Entity("Order", b =>
                {
                    b.Navigation("DeliveryTracking");

                    b.Navigation("OrderDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
