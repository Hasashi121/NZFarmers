// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NZFarmers.Data;

#nullable disable

namespace NZFarmers.Migrations
{
    [DbContext(typeof(NZFarmersContext))]
    [Migration("20250919082112_CleanedUpproject")]
    partial class CleanedUpproject
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("NZFarmers.Areas.Identity.Data.NZFarmersUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "seed-user-1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a4139feb-ba6d-4039-b451-258c92662a2d",
                            ContactNumber = "",
                            CreatedAt = new DateTime(2025, 9, 19, 8, 21, 11, 723, DateTimeKind.Utc).AddTicks(7130),
                            Email = "sarah@example.com",
                            EmailConfirmed = true,
                            FirstName = "",
                            LastName = "",
                            LockoutEnabled = false,
                            NormalizedEmail = "SARAH@EXAMPLE.COM",
                            NormalizedUserName = "SARAH@EXAMPLE.COM",
                            PasswordHash = "PLACEHOLDER_HASH",
                            PhoneNumberConfirmed = false,
                            Role = 2,
                            SecurityStamp = "b5a00211-a9cb-42fe-af7c-c03fa56ca11f",
                            TwoFactorEnabled = false,
                            UserName = "sarah@example.com"
                        },
                        new
                        {
                            Id = "seed-user-2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "70ef334e-ce24-4ad9-b20a-c47a25ed9fb6",
                            ContactNumber = "",
                            CreatedAt = new DateTime(2025, 9, 19, 8, 21, 11, 723, DateTimeKind.Utc).AddTicks(7221),
                            Email = "tom@example.com",
                            EmailConfirmed = true,
                            FirstName = "",
                            LastName = "",
                            LockoutEnabled = false,
                            NormalizedEmail = "TOM@EXAMPLE.COM",
                            NormalizedUserName = "TOM@EXAMPLE.COM",
                            PasswordHash = "PLACEHOLDER_HASH",
                            PhoneNumberConfirmed = false,
                            Role = 2,
                            SecurityStamp = "f74681e5-b090-4aa9-a4bc-cd5d234734ca",
                            TwoFactorEnabled = false,
                            UserName = "tom@example.com"
                        },
                        new
                        {
                            Id = "seed-user-3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "247b50bd-aafe-47a8-9f3c-40e1ebd31f99",
                            ContactNumber = "",
                            CreatedAt = new DateTime(2025, 9, 19, 8, 21, 11, 723, DateTimeKind.Utc).AddTicks(7275),
                            Email = "mike@example.com",
                            EmailConfirmed = true,
                            FirstName = "",
                            LastName = "",
                            LockoutEnabled = false,
                            NormalizedEmail = "MIKE@EXAMPLE.COM",
                            NormalizedUserName = "MIKE@EXAMPLE.COM",
                            PasswordHash = "PLACEHOLDER_HASH",
                            PhoneNumberConfirmed = false,
                            Role = 2,
                            SecurityStamp = "e86a0f6e-f7fb-4d6e-8d9b-6078c759dcf9",
                            TwoFactorEnabled = false,
                            UserName = "mike@example.com"
                        },
                        new
                        {
                            Id = "seed-user-4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "aca012bb-b176-45bd-b058-9692efac82cb",
                            ContactNumber = "",
                            CreatedAt = new DateTime(2025, 9, 19, 8, 21, 11, 723, DateTimeKind.Utc).AddTicks(7296),
                            Email = "jenny@example.com",
                            EmailConfirmed = true,
                            FirstName = "",
                            LastName = "",
                            LockoutEnabled = false,
                            NormalizedEmail = "JENNY@EXAMPLE.COM",
                            NormalizedUserName = "JENNY@EXAMPLE.COM",
                            PasswordHash = "PLACEHOLDER_HASH",
                            PhoneNumberConfirmed = false,
                            Role = 2,
                            SecurityStamp = "4ef9a8aa-b154-4dcc-9b4c-ad0dbc6ca1a4",
                            TwoFactorEnabled = false,
                            UserName = "jenny@example.com"
                        },
                        new
                        {
                            Id = "seed-user-5",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "57e5133d-3b36-4522-ab76-bd94bff6e1be",
                            ContactNumber = "",
                            CreatedAt = new DateTime(2025, 9, 19, 8, 21, 11, 723, DateTimeKind.Utc).AddTicks(7315),
                            Email = "david@example.com",
                            EmailConfirmed = true,
                            FirstName = "",
                            LastName = "",
                            LockoutEnabled = false,
                            NormalizedEmail = "DAVID@EXAMPLE.COM",
                            NormalizedUserName = "DAVID@EXAMPLE.COM",
                            PasswordHash = "PLACEHOLDER_HASH",
                            PhoneNumberConfirmed = false,
                            Role = 2,
                            SecurityStamp = "c51c054f-97b5-4f54-abb5-7d8e84d67269",
                            TwoFactorEnabled = false,
                            UserName = "david@example.com"
                        },
                        new
                        {
                            Id = "seed-user-6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "da45b188-4b99-441f-92ad-53af8f4ff297",
                            ContactNumber = "",
                            CreatedAt = new DateTime(2025, 9, 19, 8, 21, 11, 723, DateTimeKind.Utc).AddTicks(7345),
                            Email = "anna@example.com",
                            EmailConfirmed = true,
                            FirstName = "",
                            LastName = "",
                            LockoutEnabled = false,
                            NormalizedEmail = "ANNA@EXAMPLE.COM",
                            NormalizedUserName = "ANNA@EXAMPLE.COM",
                            PasswordHash = "PLACEHOLDER_HASH",
                            PhoneNumberConfirmed = false,
                            Role = 2,
                            SecurityStamp = "e05234c4-c671-4ebc-b4f1-e1ba093ff79d",
                            TwoFactorEnabled = false,
                            UserName = "anna@example.com"
                        });
                });

            modelBuilder.Entity("NZFarmers.Models.EducationalContent", b =>
                {
                    b.Property<int>("ContentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ContentID"));

                    b.Property<string>("ContentURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("ContentID");

                    b.ToTable("EducationalContents");

                    b.HasData(
                        new
                        {
                            ContentID = 10,
                            ContentURL = "https://www.mpi.govt.nz/agriculture/sustainable-farming/",
                            CreatedAt = new DateTime(2025, 8, 20, 8, 21, 11, 723, DateTimeKind.Utc).AddTicks(7723),
                            Description = "Learn about eco-friendly farming methods that work best in New Zealand's unique climate and soil conditions. Discover how to reduce environmental impact while maintaining productivity.",
                            Title = "Sustainable Farming Practices for New Zealand"
                        },
                        new
                        {
                            ContentID = 20,
                            ContentURL = "https://www.asurequality.com/our-services/organic-certification/",
                            CreatedAt = new DateTime(2025, 8, 25, 8, 21, 11, 723, DateTimeKind.Utc).AddTicks(7729),
                            Description = "Step-by-step guide to obtaining organic certification for your farm products. Understand the requirements, documentation needed, and benefits of organic farming.",
                            Title = "Organic Certification Guide"
                        },
                        new
                        {
                            ContentID = 30,
                            ContentURL = "https://www.landcareresearch.co.nz/discover-our-research/environment/soils/",
                            CreatedAt = new DateTime(2025, 8, 30, 8, 21, 11, 723, DateTimeKind.Utc).AddTicks(7730),
                            Description = "Essential tips for maintaining healthy soil and optimizing nutrient levels. Learn about composting, crop rotation, and natural fertilizers.",
                            Title = "Soil Health and Nutrition Management"
                        },
                        new
                        {
                            ContentID = 40,
                            ContentURL = "https://www.niwa.co.nz/agriculture/irrigation",
                            CreatedAt = new DateTime(2025, 9, 1, 8, 21, 11, 723, DateTimeKind.Utc).AddTicks(7732),
                            Description = "Effective strategies for water management and conservation on your farm. Discover irrigation techniques that save water while maximizing crop yield.",
                            Title = "Water Conservation in Agriculture"
                        },
                        new
                        {
                            ContentID = 50,
                            ContentURL = "https://www.plantandfood.co.nz/page/agriculture/pest-management/",
                            CreatedAt = new DateTime(2025, 9, 4, 8, 21, 11, 723, DateTimeKind.Utc).AddTicks(7733),
                            Description = "Integrated pest management strategies that protect your crops naturally. Learn to identify common pests and diseases affecting New Zealand farms.",
                            Title = "Pest and Disease Management"
                        },
                        new
                        {
                            ContentID = 60,
                            ContentURL = "https://www.mpi.govt.nz/agriculture/climate-change/",
                            CreatedAt = new DateTime(2025, 9, 7, 8, 21, 11, 723, DateTimeKind.Utc).AddTicks(7734),
                            Description = "Prepare your farm for changing weather patterns and extreme events. Strategies for building resilience and adapting to climate variability.",
                            Title = "Climate Change Adaptation for Farmers"
                        },
                        new
                        {
                            ContentID = 70,
                            ContentURL = "https://www.marketgardening.co.nz/direct-marketing/",
                            CreatedAt = new DateTime(2025, 9, 9, 8, 21, 11, 723, DateTimeKind.Utc).AddTicks(7736),
                            Description = "Learn how to sell directly to consumers and restaurants. Build relationships with local buyers and maximize your profit margins through direct sales.",
                            Title = "Direct Marketing and Farm-to-Table Sales"
                        },
                        new
                        {
                            ContentID = 80,
                            ContentURL = "https://www.gardening.co.nz/vegetables/planting-calendar/",
                            CreatedAt = new DateTime(2025, 9, 11, 8, 21, 11, 723, DateTimeKind.Utc).AddTicks(7737),
                            Description = "Month-by-month guide to planting vegetables and fruits in New Zealand. Optimize your growing seasons and plan for year-round production.",
                            Title = "Seasonal Planting Calendar for NZ"
                        },
                        new
                        {
                            ContentID = 90,
                            ContentURL = "https://www.worksafe.govt.nz/topic-and-industry/agriculture/",
                            CreatedAt = new DateTime(2025, 9, 14, 8, 21, 11, 723, DateTimeKind.Utc).AddTicks(7739),
                            Description = "Essential safety practices and risk management strategies for farm operations. Protect yourself, your workers, and your property.",
                            Title = "Farm Safety and Risk Management"
                        },
                        new
                        {
                            ContentID = 100,
                            ContentURL = "https://www.agritech.org.nz/resources/",
                            CreatedAt = new DateTime(2025, 9, 16, 8, 21, 11, 723, DateTimeKind.Utc).AddTicks(7741),
                            Description = "Explore how technology can improve farm efficiency and productivity. From GPS tractors to soil sensors, discover the latest agricultural innovations.",
                            Title = "Technology in Modern Farming"
                        });
                });

            modelBuilder.Entity("NZFarmers.Models.FarmerMarketEvent", b =>
                {
                    b.Property<int>("EventID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EventID"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("EventID");

                    b.ToTable("FarmerMarketEvents");

                    b.HasData(
                        new
                        {
                            EventID = 60,
                            CreatedAt = new DateTime(2024, 8, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Date = new DateTime(2024, 9, 14, 8, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Seasonal produce, artisan breads, and live folk music from local performers.",
                            Location = "Claudelands Event Centre, Hamilton",
                            Title = "Hamilton Harvest Fair"
                        },
                        new
                        {
                            EventID = 35,
                            CreatedAt = new DateTime(2024, 8, 5, 0, 0, 0, 0, DateTimeKind.Utc),
                            Date = new DateTime(2024, 10, 5, 9, 30, 0, 0, DateTimeKind.Utc),
                            Description = "Celebrate spring with organic vegetables, flowers, and children's workshops.",
                            Location = "Cathedral Square, Christchurch",
                            Title = "Christchurch Spring Market"
                        },
                        new
                        {
                            EventID = 45,
                            CreatedAt = new DateTime(2024, 8, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            Date = new DateTime(2024, 11, 2, 7, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Farm-to-table tastings featuring coastal seafood and fresh dairy selections.",
                            Location = "Wellington Waterfront, Wellington",
                            Title = "Wellington Waterfront Farmers"
                        },
                        new
                        {
                            EventID = 912,
                            CreatedAt = new DateTime(2024, 8, 15, 0, 0, 0, 0, DateTimeKind.Utc),
                            Date = new DateTime(2024, 12, 7, 9, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Handmade preserves, cheeses, and cooking demos by local chefs.",
                            Location = "Octagon Square, Dunedin",
                            Title = "Otago Artisan Market"
                        },
                        new
                        {
                            EventID = 15,
                            CreatedAt = new DateTime(2024, 8, 20, 0, 0, 0, 0, DateTimeKind.Utc),
                            Date = new DateTime(2024, 9, 28, 16, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Evening market with gourmet street food, live DJs, and seasonal fruit stalls.",
                            Location = "Silo Park, Auckland",
                            Title = "Auckland Night Farmers Market"
                        },
                        new
                        {
                            EventID = 231,
                            CreatedAt = new DateTime(2024, 8, 25, 0, 0, 0, 0, DateTimeKind.Utc),
                            Date = new DateTime(2025, 1, 18, 8, 30, 0, 0, DateTimeKind.Utc),
                            Description = "Organic produce, fresh seafood, and artisan crafts by the bay.",
                            Location = "Tauranga Memorial Park, Tauranga",
                            Title = "Tauranga Bay Organic Market"
                        },
                        new
                        {
                            EventID = 1007,
                            CreatedAt = new DateTime(2024, 9, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Date = new DateTime(2025, 2, 8, 9, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Geothermally grown vegetables, Maori kai, and cultural performances.",
                            Location = "Government Gardens, Rotorua",
                            Title = "Rotorua Geothermal Growers"
                        },
                        new
                        {
                            EventID = 1008,
                            CreatedAt = new DateTime(2024, 9, 5, 0, 0, 0, 0, DateTimeKind.Utc),
                            Date = new DateTime(2025, 3, 15, 10, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Wine tastings, grape harvest activities, and local produce showcase.",
                            Location = "Blenheim Town Square, Marlborough",
                            Title = "Marlborough Wine & Harvest Festival"
                        },
                        new
                        {
                            EventID = 1009,
                            CreatedAt = new DateTime(2024, 9, 10, 0, 0, 0, 0, DateTimeKind.Utc),
                            Date = new DateTime(2025, 1, 25, 8, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Celebrating summer stone fruits with tastings, cooking demos, and orchard tours.",
                            Location = "Alexandra Township, Central Otago",
                            Title = "Central Otago Stone Fruit Fair"
                        },
                        new
                        {
                            EventID = 1010,
                            CreatedAt = new DateTime(2024, 9, 15, 0, 0, 0, 0, DateTimeKind.Utc),
                            Date = new DateTime(2025, 2, 22, 9, 30, 0, 0, DateTimeKind.Utc),
                            Description = "Dairy farm tours, cheese-making workshops, and fresh milk tastings.",
                            Location = "Pukekura Park, New Plymouth",
                            Title = "Taranaki Dairy Festival"
                        },
                        new
                        {
                            EventID = 1011,
                            CreatedAt = new DateTime(2024, 9, 20, 0, 0, 0, 0, DateTimeKind.Utc),
                            Date = new DateTime(2025, 4, 12, 8, 30, 0, 0, DateTimeKind.Utc),
                            Description = "Peninsula produce, native plants, and eco-friendly farming demonstrations.",
                            Location = "Thames Waterfront, Coromandel",
                            Title = "Coromandel Peninsula Market"
                        },
                        new
                        {
                            EventID = 1012,
                            CreatedAt = new DateTime(2024, 9, 25, 0, 0, 0, 0, DateTimeKind.Utc),
                            Date = new DateTime(2025, 5, 3, 10, 30, 0, 0, DateTimeKind.Utc),
                            Description = "Wild foods, foraged ingredients, and adventure cuisine from the West Coast.",
                            Location = "Greymouth Civic Centre, West Coast",
                            Title = "West Coast Wild Foods Market"
                        });
                });

            modelBuilder.Entity("NZFarmers.Models.FarmerProduct", b =>
                {
                    b.Property<int>("FarmerProductID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FarmerProductID"));

                    b.Property<int>("Category")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("FarmerID")
                        .HasColumnType("int");

                    b.Property<string>("ImageURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.HasKey("FarmerProductID");

                    b.HasIndex("FarmerID");

                    b.ToTable("FarmerProducts");

                    b.HasData(
                        new
                        {
                            FarmerProductID = 1,
                            Category = 0,
                            Description = "Juicy and pesticide-free tomatoes.",
                            FarmerID = 2,
                            ImageURL = "https://example.com/images/tomatoes.jpg",
                            Price = 3.50m,
                            ProductName = "Organic Tomatoes",
                            Stock = 120
                        },
                        new
                        {
                            FarmerProductID = 2,
                            Category = 0,
                            Description = "Golden corn, perfect for BBQs.",
                            FarmerID = 2,
                            ImageURL = "https://example.com/images/corn.jpg",
                            Price = 2.20m,
                            ProductName = "Sweet Corn",
                            Stock = 200
                        },
                        new
                        {
                            FarmerProductID = 3,
                            Category = 0,
                            Description = "Tender young spinach leaves, perfect for salads.",
                            FarmerID = 3,
                            ImageURL = "https://example.com/images/spinach.jpg",
                            Price = 4.25m,
                            ProductName = "Baby Spinach",
                            Stock = 85
                        },
                        new
                        {
                            FarmerProductID = 4,
                            Category = 0,
                            Description = "Heirloom purple carrots with sweet flavor.",
                            FarmerID = 3,
                            ImageURL = "https://example.com/images/purple-carrots.jpg",
                            Price = 3.80m,
                            ProductName = "Purple Carrots",
                            Stock = 150
                        },
                        new
                        {
                            FarmerProductID = 5,
                            Category = 0,
                            Description = "Sweet New Zealand kumara, orange variety.",
                            FarmerID = 2,
                            ImageURL = "https://example.com/images/kumara.jpg",
                            Price = 2.90m,
                            ProductName = "Kumara",
                            Stock = 180
                        },
                        new
                        {
                            FarmerProductID = 6,
                            Category = 1,
                            Description = "Crisp Royal Gala apples from coastal orchards.",
                            FarmerID = 5,
                            ImageURL = "https://example.com/images/apples.jpg",
                            Price = 4.50m,
                            ProductName = "Hawke's Bay Apples",
                            Stock = 200
                        },
                        new
                        {
                            FarmerProductID = 7,
                            Category = 1,
                            Description = "Sweet and juicy golden kiwifruit.",
                            FarmerID = 5,
                            ImageURL = "https://example.com/images/golden-kiwi.jpg",
                            Price = 6.99m,
                            ProductName = "Golden Kiwifruit",
                            Stock = 120
                        },
                        new
                        {
                            FarmerProductID = 8,
                            Category = 1,
                            Description = "Aromatic New Zealand feijoas, perfectly ripe.",
                            FarmerID = 5,
                            ImageURL = "https://example.com/images/feijoas.jpg",
                            Price = 5.25m,
                            ProductName = "Feijoas",
                            Stock = 90
                        },
                        new
                        {
                            FarmerProductID = 9,
                            Category = 1,
                            Description = "Tart blackcurrants, excellent for jams and desserts.",
                            FarmerID = 3,
                            ImageURL = "https://example.com/images/blackcurrants.jpg",
                            Price = 7.50m,
                            ProductName = "Blackcurrants",
                            Stock = 60
                        },
                        new
                        {
                            FarmerProductID = 10,
                            Category = 1,
                            Description = "Exotic tree tomatoes with unique tangy flavor.",
                            FarmerID = 5,
                            ImageURL = "https://example.com/images/tamarillo.jpg",
                            Price = 8.25m,
                            ProductName = "Tamarillo",
                            Stock = 45
                        },
                        new
                        {
                            FarmerProductID = 11,
                            Category = 2,
                            Description = "Heirloom tomato seeds for home gardeners.",
                            FarmerID = 6,
                            ImageURL = "https://example.com/images/tomato-seeds.jpg",
                            Price = 3.99m,
                            ProductName = "Heritage Tomato Seeds",
                            Stock = 500
                        },
                        new
                        {
                            FarmerProductID = 12,
                            Category = 2,
                            Description = "Mixed herb seeds including basil, parsley, and cilantro.",
                            FarmerID = 6,
                            ImageURL = "https://example.com/images/herb-seeds.jpg",
                            Price = 5.50m,
                            ProductName = "Herb Garden Mix",
                            Stock = 300
                        },
                        new
                        {
                            FarmerProductID = 13,
                            Category = 2,
                            Description = "Large pumpkin seeds for Halloween and cooking.",
                            FarmerID = 3,
                            ImageURL = "https://example.com/images/pumpkin-seeds.jpg",
                            Price = 4.25m,
                            ProductName = "Pumpkin Seeds",
                            Stock = 250
                        },
                        new
                        {
                            FarmerProductID = 14,
                            Category = 2,
                            Description = "Giant sunflower seeds for beautiful garden displays.",
                            FarmerID = 6,
                            ImageURL = "https://example.com/images/sunflower-seeds.jpg",
                            Price = 2.99m,
                            ProductName = "Sunflower Seeds",
                            Stock = 400
                        },
                        new
                        {
                            FarmerProductID = 15,
                            Category = 2,
                            Description = "Mixed lettuce seeds for continuous harvest.",
                            FarmerID = 2,
                            ImageURL = "https://example.com/images/lettuce-seeds.jpg",
                            Price = 6.75m,
                            ProductName = "Lettuce Variety Pack",
                            Stock = 200
                        },
                        new
                        {
                            FarmerProductID = 16,
                            Category = 3,
                            Description = "Dozen of fresh free-range eggs.",
                            FarmerID = 3,
                            ImageURL = "https://example.com/images/eggs.jpg",
                            Price = 5.00m,
                            ProductName = "Free Range Eggs",
                            Stock = 75
                        },
                        new
                        {
                            FarmerProductID = 17,
                            Category = 3,
                            Description = "Creamy whole milk from grass-fed cows.",
                            FarmerID = 4,
                            ImageURL = "https://example.com/images/milk.jpg",
                            Price = 3.25m,
                            ProductName = "Fresh Whole Milk",
                            Stock = 100
                        },
                        new
                        {
                            FarmerProductID = 18,
                            Category = 3,
                            Description = "Sharp aged cheddar, matured for 12 months.",
                            FarmerID = 4,
                            ImageURL = "https://example.com/images/cheddar.jpg",
                            Price = 12.99m,
                            ProductName = "Aged Cheddar Cheese",
                            Stock = 30
                        },
                        new
                        {
                            FarmerProductID = 19,
                            Category = 3,
                            Description = "Thick and creamy Greek-style yogurt.",
                            FarmerID = 4,
                            ImageURL = "https://example.com/images/yogurt.jpg",
                            Price = 6.50m,
                            ProductName = "Greek Style Yogurt",
                            Stock = 80
                        },
                        new
                        {
                            FarmerProductID = 20,
                            Category = 3,
                            Description = "Rich and creamy butter from grass-fed cows.",
                            FarmerID = 4,
                            ImageURL = "https://example.com/images/butter.jpg",
                            Price = 4.75m,
                            ProductName = "Grass-Fed Butter",
                            Stock = 60
                        },
                        new
                        {
                            FarmerProductID = 21,
                            Category = 4,
                            Description = "Premium lean beef mince from grass-fed cattle.",
                            FarmerID = 7,
                            ImageURL = "https://example.com/images/beef-mince.jpg",
                            Price = 15.99m,
                            ProductName = "Grass-Fed Beef Mince",
                            Stock = 40
                        },
                        new
                        {
                            FarmerProductID = 22,
                            Category = 4,
                            Description = "Tender lamb chops from free-range sheep.",
                            FarmerID = 7,
                            ImageURL = "https://example.com/images/lamb-chops.jpg",
                            Price = 22.50m,
                            ProductName = "Lamb Chops",
                            Stock = 25
                        },
                        new
                        {
                            FarmerProductID = 23,
                            Category = 4,
                            Description = "Whole free-range chicken, hormone-free.",
                            FarmerID = 7,
                            ImageURL = "https://example.com/images/chicken.jpg",
                            Price = 18.75m,
                            ProductName = "Free Range Chicken",
                            Stock = 35
                        },
                        new
                        {
                            FarmerProductID = 24,
                            Category = 4,
                            Description = "Wild venison steaks, lean and flavorful.",
                            FarmerID = 7,
                            ImageURL = "https://example.com/images/venison.jpg",
                            Price = 28.99m,
                            ProductName = "Venison Steaks",
                            Stock = 20
                        },
                        new
                        {
                            FarmerProductID = 25,
                            Category = 4,
                            Description = "Smoked bacon from heritage breed pigs.",
                            FarmerID = 7,
                            ImageURL = "https://example.com/images/bacon.jpg",
                            Price = 12.25m,
                            ProductName = "Bacon",
                            Stock = 45
                        },
                        new
                        {
                            FarmerProductID = 26,
                            Category = 5,
                            Description = "Stone-ground flour from heritage wheat.",
                            FarmerID = 6,
                            ImageURL = "https://example.com/images/wheat-flour.jpg",
                            Price = 4.99m,
                            ProductName = "Organic Wheat Flour",
                            Stock = 150
                        },
                        new
                        {
                            FarmerProductID = 27,
                            Category = 5,
                            Description = "Traditional rolled oats, perfect for breakfast.",
                            FarmerID = 6,
                            ImageURL = "https://example.com/images/oats.jpg",
                            Price = 3.75m,
                            ProductName = "Rolled Oats",
                            Stock = 200
                        },
                        new
                        {
                            FarmerProductID = 28,
                            Category = 5,
                            Description = "High-protein quinoa, locally grown.",
                            FarmerID = 6,
                            ImageURL = "https://example.com/images/quinoa.jpg",
                            Price = 8.50m,
                            ProductName = "Quinoa",
                            Stock = 80
                        },
                        new
                        {
                            FarmerProductID = 29,
                            Category = 5,
                            Description = "Nutritious brown rice, short grain variety.",
                            FarmerID = 6,
                            ImageURL = "https://example.com/images/brown-rice.jpg",
                            Price = 5.25m,
                            ProductName = "Brown Rice",
                            Stock = 120
                        },
                        new
                        {
                            FarmerProductID = 30,
                            Category = 5,
                            Description = "Hulled barley, excellent for soups and stews.",
                            FarmerID = 6,
                            ImageURL = "https://example.com/images/barley.jpg",
                            Price = 3.99m,
                            ProductName = "Barley",
                            Stock = 100
                        },
                        new
                        {
                            FarmerProductID = 31,
                            Category = 6,
                            Description = "Locally harvested honey from native bush.",
                            FarmerID = 3,
                            ImageURL = "https://example.com/images/honey.jpg",
                            Price = 8.99m,
                            ProductName = "Raw Clover Honey",
                            Stock = 60
                        },
                        new
                        {
                            FarmerProductID = 32,
                            Category = 6,
                            Description = "Premium Manuka honey with UMF 10+ rating.",
                            FarmerID = 3,
                            ImageURL = "https://example.com/images/manuka-honey.jpg",
                            Price = 25.99m,
                            ProductName = "Manuka Honey",
                            Stock = 40
                        },
                        new
                        {
                            FarmerProductID = 33,
                            Category = 6,
                            Description = "Cold-pressed extra virgin olive oil.",
                            FarmerID = 5,
                            ImageURL = "https://example.com/images/olive-oil.jpg",
                            Price = 14.50m,
                            ProductName = "Olive Oil",
                            Stock = 55
                        },
                        new
                        {
                            FarmerProductID = 34,
                            Category = 6,
                            Description = "Strawberry jam made from fresh berries.",
                            FarmerID = 2,
                            ImageURL = "https://example.com/images/strawberry-jam.jpg",
                            Price = 7.25m,
                            ProductName = "Homemade Jam",
                            Stock = 35
                        },
                        new
                        {
                            FarmerProductID = 35,
                            Category = 6,
                            Description = "Mixed fresh herbs: rosemary, thyme, and sage.",
                            FarmerID = 4,
                            ImageURL = "https://example.com/images/herb-bundle.jpg",
                            Price = 4.99m,
                            ProductName = "Fresh Herbs Bundle",
                            Stock = 70
                        });
                });

            modelBuilder.Entity("NZFarmers.Models.Farmers", b =>
                {
                    b.Property<int>("FarmerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FarmerID"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("FarmName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfileImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Region")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ZipCode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("FarmerID");

                    b.HasIndex("UserID");

                    b.ToTable("Farmers");

                    b.HasData(
                        new
                        {
                            FarmerID = 3,
                            Address = "123 Orchard Lane",
                            City = "Hamilton",
                            Description = "Specializing in organic produce.",
                            FarmName = "Green Valley Farms",
                            PhoneNumber = "+64212345678",
                            ProfileImage = "https://example.com/images/farm1.jpg",
                            Region = "Waikato",
                            UserID = "seed-user-1",
                            ZipCode = "3204"
                        },
                        new
                        {
                            FarmerID = 2,
                            Address = "456 Harvest Rd",
                            City = "Christchurch",
                            Description = "Locally sourced vegetables and fruits.",
                            FarmName = "Sunny Fields",
                            PhoneNumber = "+64287654321",
                            ProfileImage = "https://example.com/images/farm2.jpg",
                            Region = "Canterbury",
                            UserID = "seed-user-2",
                            ZipCode = "8011"
                        },
                        new
                        {
                            FarmerID = 4,
                            Address = "789 Alpine Road",
                            City = "Taupo",
                            Description = "Premium dairy products from grass-fed cows.",
                            FarmName = "Mountain View Dairy",
                            PhoneNumber = "+64273456789",
                            ProfileImage = "https://example.com/images/farm3.jpg",
                            Region = "Waikato",
                            UserID = "seed-user-3",
                            ZipCode = "3330"
                        },
                        new
                        {
                            FarmerID = 5,
                            Address = "321 Seaside Ave",
                            City = "Napier",
                            Description = "Fresh citrus and stone fruits by the coast.",
                            FarmName = "Coastal Orchards",
                            PhoneNumber = "+64298765432",
                            ProfileImage = "https://example.com/images/farm4.jpg",
                            Region = "Hawke's Bay",
                            UserID = "seed-user-4",
                            ZipCode = "4110"
                        },
                        new
                        {
                            FarmerID = 6,
                            Address = "654 Wheat Field Drive",
                            City = "Palmerston North",
                            Description = "Traditional grains and ancient wheat varieties.",
                            FarmName = "Heritage Grains Co",
                            PhoneNumber = "+64234567890",
                            ProfileImage = "https://example.com/images/farm5.jpg",
                            Region = "Manawatu",
                            UserID = "seed-user-5",
                            ZipCode = "4410"
                        },
                        new
                        {
                            FarmerID = 7,
                            Address = "987 Pasture Lane",
                            City = "Invercargill",
                            Description = "Ethically raised grass-fed beef and lamb.",
                            FarmName = "Organic Meat Co",
                            PhoneNumber = "+64245678901",
                            ProfileImage = "https://example.com/images/farm6.jpg",
                            Region = "Southland",
                            UserID = "seed-user-6",
                            ZipCode = "9810"
                        });
                });

            modelBuilder.Entity("NZFarmers.Models.OrderDetail", b =>
                {
                    b.Property<int>("OrderDetailID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderDetailID"));

                    b.Property<int>("FarmerProductID")
                        .HasColumnType("int");

                    b.Property<int>("OrderID")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("Subtotal")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("OrderDetailID");

                    b.HasIndex("FarmerProductID");

                    b.HasIndex("OrderID");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("NZFarmers.Models.PaymentDetail", b =>
                {
                    b.Property<int>("PaymentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentID"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Method")
                        .HasColumnType("int");

                    b.Property<int>("OrderID")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("PaymentID");

                    b.HasIndex("OrderID");

                    b.HasIndex("UserID");

                    b.ToTable("PaymentDetails");
                });

            modelBuilder.Entity("NZFarmers.Models.Rating", b =>
                {
                    b.Property<int>("RatingID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RatingID"));

                    b.Property<string>("Comment")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("FarmerID")
                        .HasColumnType("int");

                    b.Property<int>("RatingValue")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("RatingID");

                    b.HasIndex("FarmerID");

                    b.HasIndex("UserId");

                    b.ToTable("Ratings");
                });

            modelBuilder.Entity("NZFarmers.Models.ShoppingCartItem", b =>
                {
                    b.Property<int>("ShoppingCartItemID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ShoppingCartItemID"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("FarmerProductID")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ShoppingCartItemID");

                    b.HasIndex("FarmerProductID");

                    b.HasIndex("UserID");

                    b.ToTable("ShoppingCartItems");
                });

            modelBuilder.Entity("Order", b =>
                {
                    b.Property<int>("OrderID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderID"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("OrderID");

                    b.HasIndex("UserID");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("NZFarmers.Areas.Identity.Data.NZFarmersUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("NZFarmers.Areas.Identity.Data.NZFarmersUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NZFarmers.Areas.Identity.Data.NZFarmersUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("NZFarmers.Areas.Identity.Data.NZFarmersUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NZFarmers.Models.FarmerProduct", b =>
                {
                    b.HasOne("NZFarmers.Models.Farmers", "Farmer")
                        .WithMany("FarmerProducts")
                        .HasForeignKey("FarmerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Farmer");
                });

            modelBuilder.Entity("NZFarmers.Models.Farmers", b =>
                {
                    b.HasOne("NZFarmers.Areas.Identity.Data.NZFarmersUser", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("NZFarmers.Models.OrderDetail", b =>
                {
                    b.HasOne("NZFarmers.Models.FarmerProduct", "FarmerProduct")
                        .WithMany("OrderDetails")
                        .HasForeignKey("FarmerProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("FarmerProduct");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("NZFarmers.Models.PaymentDetail", b =>
                {
                    b.HasOne("Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("NZFarmers.Areas.Identity.Data.NZFarmersUser", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("User");
                });

            modelBuilder.Entity("NZFarmers.Models.Rating", b =>
                {
                    b.HasOne("NZFarmers.Models.Farmers", "Farmer")
                        .WithMany("Ratings")
                        .HasForeignKey("FarmerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NZFarmers.Areas.Identity.Data.NZFarmersUser", "User")
                        .WithMany("Ratings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Farmer");

                    b.Navigation("User");
                });

            modelBuilder.Entity("NZFarmers.Models.ShoppingCartItem", b =>
                {
                    b.HasOne("NZFarmers.Models.FarmerProduct", "FarmerProduct")
                        .WithMany("ShoppingCartItems")
                        .HasForeignKey("FarmerProductID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("NZFarmers.Areas.Identity.Data.NZFarmersUser", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("FarmerProduct");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Order", b =>
                {
                    b.HasOne("NZFarmers.Areas.Identity.Data.NZFarmersUser", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("NZFarmers.Areas.Identity.Data.NZFarmersUser", b =>
                {
                    b.Navigation("Ratings");
                });

            modelBuilder.Entity("NZFarmers.Models.FarmerProduct", b =>
                {
                    b.Navigation("OrderDetails");

                    b.Navigation("ShoppingCartItems");
                });

            modelBuilder.Entity("NZFarmers.Models.Farmers", b =>
                {
                    b.Navigation("FarmerProducts");

                    b.Navigation("Ratings");
                });

            modelBuilder.Entity("Order", b =>
                {
                    b.Navigation("OrderDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
